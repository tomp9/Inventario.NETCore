@using Entities
@using Bussines


<div class="form-group">
    <select class="form-control" @onchange="OnChangedWarehouse">
        <option value="">Seleccione una bodega ...</option>
        @foreach (var warehouse in warehouses)
        {
            <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
        }
    </select>
</div>

<hr />
<EditForm Model="oInputOutput">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="oInputOutput.StorageId">
            <option value="">Seleccione un producto ...</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Escriba la cantidad </label>
        <InputNumber class="form-control" @bind-Value="oInputOutput.Quantity"></InputNumber>
    </div>
    <div class="form-group">
        <label> ¿ Es una entrada ? </label>
        <InputCheckbox class="form-control" @bind-Value="oInputOutput.IsInput" />
    </div>
    <input class="form-control" type="button" value="@buttonValue" @onclick="SaveInOput" />
</EditForm>

<div class="text-center h4">@message</div>
<hr />

@code {
    InputOutputEntity oInputOutput = new InputOutputEntity();

    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();

    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();

    string message = "";

    string buttonValue => oInputOutput.IsInput ? "Registrar Entrada" : "Registrar Salida";
    protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.ItemList();
    }

    private void OnChangedWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();

        storages = B_Storage.GetStorageProductByWarehouse(idWarehouse);
    }

    private void SaveInOput()
    {
        oStorage = storages.LastOrDefault(s => s.StorageId == oInputOutput.StorageId);
        oProduct = oStorage.Product;

        if (oInputOutput.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInputOutput.Quantity;
            B_Storage.UpdateItem(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInputOutput.Quantity;
            B_Product.UpdateItem(oProduct);
            message = $" El producto {oProduct.ProductName} ha sido actualizado";
        }
        else
        {
            if (IsBiggerthanZero(oInputOutput.Quantity, oStorage.PartialQuantity))
            {
                oStorage.PartialQuantity = oStorage.PartialQuantity - oInputOutput.Quantity;
                B_Storage.UpdateItem(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInputOutput.Quantity;
                B_Product.UpdateItem(oProduct);
            }
            else
            {
                message = $"No existe sufuciente la cantidad suficiente en bodega para el producto {oProduct.ProductName} ";
            }

        }
    }

    private bool IsBiggerthanZero(int quantity, int storageQuantity)
    {
        if (storageQuantity > quantity)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}
